#+TITLE: CIS198 Lecture 2: 结构化的数据
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-03-27 Wed>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 结构体
** 定义
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      y: i32,
  }

  let mut origin = Point{x: 0, y: 0};
  println!("{:?}", origin);

  origin.x += 1;
  origin.y -= 1;
  println!("{:?}", origin);
#+END_SRC

#+RESULTS:
: Point { x: 0, y: 0 }
: Point { x: 1, y: -1 }

** 访问构体字段
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      mut y: i32,  // 非法的
  }

  let mut p = Point{x: 0, y: 0};
  println!("{:?}", p);

  p.x += 1;
  p.y -= 1;
  println!("{:?}", p);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoJ5EtMu`.

** mut 不是结构体属性
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      mut y: i32,  // 非法的
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoJ5EtMu`.

#+BEGIN_EXAMPLE
  error: expected identifier, found keyword `mut`
   --> src/main.rs:6:5
    |
  4 | struct Point {
    |        ----- while parsing this struct
  5 |     x: i32,
  6 |     mut y: i32,  // 非法的
    |     ^^^ expected identifier, found keyword

  error: could not compile `cargoJ5EtMu` (bin "cargoJ5EtMu") due to 1 previous error
#+END_EXAMPLE
** 结构体的命名空间
#+BEGIN_SRC rust :exports both
  mod foo {
      #[derive(Debug)]
      pub struct Point {
          x: i32,
          y: i32,
      }

      pub fn new(x: i32, y: i32) -> Point {
          Point{x: x, y: y}
      }
  }

  fn main() {
      let p1 = foo::new(1, 2);
      println!("{:?}", p1);

      match p1 {
          foo::Point{x, y} => println!("{x}, {y}"),
      }
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoVwohr3`.

** 结构体的 match
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  pub struct Point {
      x: i32,
      y: i32,
  }

  fn main() {
      let p1 = Point{x:1, y:2};
      match p1 {
          Point{x, y} => println!("aa: {x}, {y}"),
      }

      match p1 {
          Point{x: x1, y: y1} => println!("bb: {x1}, {y1}"),
      }

      match p1 {
          Point{y, ..} => println!("cc: y={y}"),
      }
  }
#+END_SRC

#+RESULTS:
: aa: 1, 2
: bb: 1, 2
: cc: y=2

** 结构体的更新
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  pub struct Foo {
      a: i32,
      b: i32,
      c: i32,
      d: i32,
      e: i32,
  }

  fn main() {
      let p1 = Foo{a:1, b:1, c:2, d:2, e:2};
      println!("{:?}", p1);

      let p2 = Foo{e:999, ..p1};
      println!("{:?}", p2);

      // let p3 = Foo{..p1, e:666}; // 报错
      // println!("{:?}", p3);

      let p4 = Foo{a:11, b:22, c:33, ..p1};
      println!("{:?}", p4);
  }
#+END_SRC

#+RESULTS:
: Foo { a: 1, b: 1, c: 2, d: 2, e: 2 }
: Foo { a: 1, b: 1, c: 2, d: 2, e: 999 }
: Foo { a: 11, b: 22, c: 33, d: 2, e: 2 }

** Tuple Struct
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Color(i32, i32, i32);

  let mut c1 = Color(0, 255, 255);
  println!("{:?}", c1);

  c1.0 = 255;
  println!("{:?}", c1);

  match c1 {
      Color(r, g, b) => println!("r=0x{r:x}, g=0x{g:x}, b=0x{b:x}"),
  }
#+END_SRC

#+RESULTS:
: Color(0, 255, 255)
: Color(255, 255, 255)
: r=0xff, g=0xff, b=0xff

** Tuple Struct vs Type Alias
#+BEGIN_SRC rust :exports both
  #[derive(Debug, PartialEq)]
  struct Meters(i32);
  #[derive(Debug)]
  struct Yards(i32);

  // support `==' or `+'
  type MetersAlias = i32;
  type YardsAlias = i32;

  let a1 = Meters(0);
  let c1 = Meters(0);
  let b1 = Yards(1);
  // println!("{:?}", a1 + c1);
  // println!("{:?}", a1 == b1);


  let a2 : MetersAlias=0;
  let a3 : MetersAlias=1;
  let b2 : YardsAlias=1;
  println!("{:?}", a2 + a3);
  // println!("{:?}", a1 == b2);
#+END_SRC

#+RESULTS:
: 1

** Unit Struct
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Unit;
  let u = Unit;
  println!("{:?}", u);
#+END_SRC

#+RESULTS:
: Unit

* 枚举
** 定义枚举
#+BEGIN_SRC rust :exports both
  enum Resultish {
      Ok,
      Warning{ code: i32, message: String},
      Err(String)
  }
#+END_SRC

#+RESULTS:

** 枚举实例化
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  enum Resultish {
      Ok,
      Warning{ code: i32, message: String},
      Err(String)
  }

  let ok = Resultish::Ok;
  let err1 = Resultish::Err("bad request".to_string());
  println!("{:?}", ok);
  println!("{:?}", err1);
#+END_SRC

#+RESULTS:
: Ok
: Err("bad request")

** 递归的枚举
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  enum List {
      Nil,
      Cons(i32, Box<List>)
  }

  let empty = List::Nil;
  println!("{:?}", empty);

  let head = List::Cons(1, Box::new(empty));
  println!("{:?}", head);
#+END_SRC

#+RESULTS:
: Nil
: Cons(1, Nil)

* 方法
** 方法的定义
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      y: i32,
  }

  impl Point {
      // 方法
      pub fn distance(&self, other: Point) -> f32 {
          let (dx, dy) = (self.x - other.x, self.y - other.y);
          ((dx*dx + dy*dy) as f32).sqrt()
      }
  }

  fn main() {
      let p0 = Point{x:0, y:0};
      let p1 = Point{x:3, y:4};
      let d = p0.distance(p1);
      println!("{:?}", d);
  }
#+END_SRC

#+RESULTS:
: 5.0

** 方法中 self 的关系
- ~&self~ 借用 （不可变）
- ~&mut self~ 可变借用
- ~self~ 所有权转移
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      y: i32,
  }

  impl Point {
      // 方法：求距离
      pub fn distance(&self, other: Point) -> f32 {
          let (dx, dy) = (self.x - other.x, self.y - other.y);
          ((dx*dx + dy*dy) as f32).sqrt()
      }

      // 平移
      pub fn translate(&mut self, dx: i32, dy: i32) {
          self.x += dx;
          self.y += dy;
      }


      // 按 y 轴对称 (1, 2) => (-1, 2)
      pub fn mirror_y(self) -> Point {
          Point {x: -self.x, y: self.y }
      }
  }

  fn main() {
      let p0 = Point{x:0, y:0};
      let mut p1 = Point{x:3, y:4};
      p1.translate(3, 1);
      println!("{:?}", p1);
      let p2 = p1.mirror_y();
      println!("{:?}", p2);
      // println!("{:?}", p1);
  }
#+END_SRC

#+RESULTS:
: Point { x: 6, y: 5 }
: Point { x: -6, y: 5 }

* 模式
** 模式匹配
- ~0...5~ 已经过期了，不推荐使用
#+BEGIN_SRC rust :exports both
  let x = 0;
  match x {
      0..=5 => println!("0-5"),
      _ => println!("you still lost the game"),
  }
#+END_SRC

#+RESULTS:
: 0-5
** 匹配引用
#+BEGIN_SRC rust :exports both
  let x = 17;
  match x {
      ref r => println!("Of type &i32: {}", r),
  }
#+END_SRC

#+RESULTS:
: Of type &i32: 17

- ~ref mut~ 获取变量的可变引用
#+BEGIN_SRC rust :exports both
  let mut x = 5;
  match x {
      ref r if x == 5 => println!("r = {}", r),
      ref mut r => *r = 5,
  }
  println!("{:?}", x);
#+END_SRC

#+RESULTS:
: r = 5
: 5

** if-let 绑定
#+BEGIN_SRC rust :exports both
  enum Resultish {
      Ok,
      Warning{ code: i32, message: String},
      Err(String)
  }

  // case1: 只考虑一种情况
  match make_request() {
      Resultish::Err(_) => println!("Total and utter failure");
      _ => println!("ok");
  }

  // case2: 只考虑一种情况
  let result = make_request();
  if let Resultish::Err(s) = result {
     println!("Failure: s = {:?}", s);
  } else {
     println!("ok");
  }
#+END_SRC

** while-let 绑定
#+BEGIN_SRC rust :exports both
  enum Resultish {
      Ok,
      Warning{ code: i32, message: String},
      Err(String)
  }

  let result = make_request();
  while let Resultish::Err(s) = result {
     println!("Failure: s = {:?}", s);
  }
#+END_SRC

** 内部绑定 inner binding
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  enum A {
      None,
      Some(B)
  }

  #[derive(Debug)]
  enum B {
      None,
      Some(i32)
  }

  fn foo(x: A) {
      match x {
          a @ A::None => println!("case I: {:?}", a),
          ref a @ A::Some(B::None) => println!("case II: {:?}", a),
          A::Some(b @ B::Some(_)) => println!("case III: {:?}", b),

          // A::Some(b) => {
          //     match b {
          //         B::None => println!("Case II-1: {:?}", b),
          //         B::Some(_) => println!("Case II-2: {:?}", b),
          //     }
          // },

          _ => println!("default case")
      }
  }

  foo(A::None);
  foo(A::Some(B::None));
  foo(A::Some(B::Some(42)));
#+END_SRC

#+RESULTS:
: case I: None
: Case II-1: None
: Case II-2: Some(42)



: case I: None
: case II: Some(None)
: case III: Some(42)

* 生命周期
** 多参数函数的生命周期
1. 入参 ~x~ 和 ~y~ 与返回值生命周期都是 ~'a~
#+BEGIN_SRC rust :exports both
  fn borrow_x_or_y<'a>(x: &'a str, y: &'a str) -> &'a str {
      //
  }
#+END_SRC

1. ~p~ 的生命周期和返回值一样，都是 ~'a~
2. ~q~ 生命周期和返回值没有限制，没有绑定关系， ~q~ 不需要存活于返回值之后
#+BEGIN_SRC rust :exports both
  fn borrow_p<'a, 'b>(p: &'a str, q: &'b str) -> &'a str {
      //
  }
#+END_SRC

** 生命周期和结构体
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Pizza(Vec<i32>); // 披萨

  #[derive(Debug)]
  struct PizzaSlice<'a> { // 披萨切边
      pizza: &'a Pizza,
      index: u32,
  }

  let p1 = Pizza(vec![1, 2, 3, 4]);
  println!("{:?}", p1);
  {
      let s1 = PizzaSlice{pizza: &p1, index: 2};
      println!("{:?}", s1);
  }
  // println!("{:?}", s1);

  let s2: PizzaSlice; // 披萨切片
  {
      let p2 = Pizza(vec![1, 2, 3, 4]);
      println!("{:?}", p2);
      s2 = PizzaSlice{pizza: &p2, index: 2};
      // println!("{:?}", s2);
  }
  // p2 销毁了, s2 并没有销毁
  // println!("{:?}", s2);
#+END_SRC

#+RESULTS:
: Pizza([1, 2, 3, 4])
: PizzaSlice { pizza: Pizza([1, 2, 3, 4]), index: 2 }
: Pizza([1, 2, 3, 4])

** 生命周期 outlive 限定符
-  <'b: 'a> 说明 'b outlives 'a
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Pizza(Vec<i32>); // 披萨

  #[derive(Debug)]
  struct PizzaSlice<'a> { // 披萨切边
      pizza: &'a Pizza,
      index: u32,
  }

  #[derive(Debug)]
  struct PizzaConsumer<'a, 'b: 'a> { // 披萨消费者 【在吃披萨】, 'b: 'a 说明 'b outlives 'a
      slice: PizzaSlice<'a>,  // 当前吃的披萨
      pizza: &'b Pizza,      // 原始的披萨
  }


  fn get_another_slice(c: &mut PizzaConsumer, index: u32) {
      c.slice = PizzaSlice{pizza: c.pizza, index: index}
  }

  let p = Pizza(vec![1, 2, 3, 4]);
  {
      let s = PizzaSlice{pizza: &p, index: 1};
      // 初始化第一片🍕
      let mut c = PizzaConsumer{slice: s, pizza: &p};

      // 再吃一片，第二片🍕
      get_another_slice(&mut c, 2);
  }
#+END_SRC

#+RESULTS:

** ~'static~ 生命周期
- ~'static~ 指定程序运行时间都不销毁【一直存在】，静态的生命周期
#+BEGIN_SRC rust :exports both
  let s1: &str = "Hello";
  let s2: &'static str = "World";
#+END_SRC

#+RESULTS:

** struct 和 enum 中引用类型都需要显示指定生命周期
#+BEGIN_SRC rust :exports both
  struct Foo<'a, 'b> {
      v: &'a Vec<i32>, // 会回收
      s: &'b str,      // 'static
  }
#+END_SRC

#+RESULTS:

** impl 的生命周期
#+BEGIN_SRC rust :exports both
  struct Foo<'a, 'b> {
      v: &'a Vec<i32>, // 会回收
      s: &'b str,      // 'static
  }

  // 实现的上面周期
  impl<'a, 'b> Foo<'a, 'b> {
      fn new(v: &'a Vec<i32>, s: &'b str) -> Foo<'a, 'b> {
          Foo {v: v, s: s}
      }
  }
#+END_SRC

#+RESULTS:
