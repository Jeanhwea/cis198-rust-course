#+TITLE: CIS198 Lecture 6: 指针类型
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-04 Thu>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 指针
1. 引用
2. 解引用
#+BEGIN_SRC C :includes '(<stdio.h>) :results output :exports both
  int val = 123;
  int *p = &val;
  printf("p  = %p\n", p);
  printf("*p = %d\n", *p);
#+END_SRC

#+RESULTS:
: p  = 0x7ff7be0b22c4
: *p = 123

* ~Box<T>~
1. 在堆上分配内存 | [[https://doc.rust-lang.org/std/boxed/struct.Box.html][link]]
2. ~Box<T>~ 是 Rust 中最常见的智能指针
3. 它是简单的封装，除了将值存储在堆上外，并没有其它性能上的损耗
4. 使用场景：
   - 特意的将数据分配在堆上
   - 数据较大时，又不想在转移所有权时进行数据拷贝
   - 类型的大小在编译期无法确定，但是我们又需要固定大小的类型时
   - Trait Object，用于说明对象实现了一个特征，而不是某个特定的类型

* ~Rc<T>~
1. 引用计数
2. 使用 ~.clone()~ 获取只读引用
   #+BEGIN_SRC rust :exports both
     use std::rc::Rc;
     let v1 = Box::new(123);
     println!("{:p}", v1);
     println!("{:p}", v1.clone());

     let v2 = Rc::new(222);
     println!("{:p}", v2);
     println!("{:p}", v2.clone());
     println!("{:p}", v2.clone());
   #+END_SRC
3. 优点是可以放到多处
   #+BEGIN_SRC rust :exports both
     use std::rc::Rc;

     #[derive(Debug)]
     struct Foo {
         v: Box<i32>,
     }

     #[derive(Debug)]
     struct Bar {
         v: Rc<i32>,
     }

     let v1 = Box::new(123);
     let f1 = Foo { v: v1 };
     // let f2 = Foo { v: a };

     let v2 = Rc::new(222);
     let b1 = Bar { v: v2.clone() };
     let b2 = Bar { v: v2 };
   #+END_SRC

   #+RESULTS:
   : error: Could not compile `cargoXIpimx`.
