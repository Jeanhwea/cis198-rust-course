#+TITLE: CIS198 Lecture 3: 泛型和 Trait
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-03-30 Sat>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil


* 泛型
** 泛型入门
#+BEGIN_SRC rust :exports both
  enum Result {
      Ok(String),
      Err(String),
  }
#+END_SRC

- ~T~ / ~E~ 表示泛型
#+BEGIN_SRC rust :exports both
  enum Result<T, E> {
      Ok(T),
      Err(E),
  }
#+END_SRC

** 泛型例子
#+BEGIN_SRC rust :exports both
  // 非泛型，直接类型
  struct Point {
      x: i32,
      y: i32,
  }

  // T 泛型: T: i32/i64/f32
  struct Point<T> {
      x: T,
      y: T,
  }

  enum List<T> {
      Nil,
      Cons(T, Box<List<T>>),
  }
#+END_SRC

#+RESULTS:

** 标准库中 Result 的泛型设计
#+BEGIN_SRC rust :exports both
  enum Result<T, E> {
      Ok(T),
      Err(E),
  }

  impl<T, E> Result<T, E> {
      fn is_ok(&self) -> bool {
          match *self {
              Ok(_) => true,
              Err(_) => false,
          }
      }
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargo8I6mnS`.

* Trait
** 简单说明
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      y: i32,
  }

  struct Line {
      from: Point,
      to: Point,
  }

  // Trait 类似于 Java 的接口或 Haskell 的 typeclass
  trait PrettyPrint {
      fn format(&self) -> String;
  }

  // 实现 Trait
  impl PrettyPrint for Point {
      fn format(&self) -> String {
          format!("({},{})", self.x, self.y)
      }
  }

  impl PrettyPrint for Line {
      fn format(&self) -> String {
          format!("[{}->{}]", self.from.format(), self.to.format())
      }
  }

  fn main() {
      let p0 = Point { x: 0, y: 0 };
      println!("p0 = {}", p0.format());
      let p1 = Point { x: 1, y: 1 };
      let line = Line { from: p0, to: p1 };
      println!("line = {}", line.format());

      // let p1 = Point{x:1, y:0};
      // println!("{}", p0.equals(p1));
  }
#+END_SRC

#+RESULTS:
: p0 = (0,0)
: line = [(0,0)->(1,1)]

** 泛型的 Trait Bound
#+BEGIN_SRC rust :exports both
  // 范围限定
  fn cloning_machine<T: Clone>(t: T) -> (T, T) {
      (t.clone(), t.clone())
  }

  fn cloning_machine<T>(t: T) -> (T, T) where T: Clone {
      (t.clone(), t.clone())
  }
#+END_SRC

** 标准库的 PrettyPrint
#+BEGIN_SRC rust :exports both

  // Trait 类似于 Java 的接口或 Haskell 的 typeclass
  trait PrettyPrint {
      fn format(&self) -> String;
  }

  // 使用标准库中的 Result
  // #[derive(Debug)]
  // enum Result<T, E> {
  //     Ok(T),
  //     Err(E),
  // }

  impl<T, E> PrettyPrint for Result<T, E>
  where
      T: PrettyPrint,
      E: PrettyPrint,
  {
      fn format(&self) -> String {
          match self {
              Ok(t) => format!("Ok({})", t.format()),
              Err(e) => format!("Err({})", e.format()),
          }
      }
  }

  trait Equals {
      fn equals(&self, other: &Self) -> bool;
  }

  impl<T, E> Equals for Result<T, E>
  where
      T: Equals,
      E: Equals,
  {
      fn equals(&self, other: &Self) -> bool {
          match (self, other) {
              (Ok(t1), Ok(t2)) => t1.equals(&t2),
              (Err(e1), Err(e2)) => e1.equals(&e2),
              _ => false,
          }
      }
  }

  fn main() {
      let ok1:Result::<String, String> = Result::Ok("1".to_string());
      let ok2 = Result::Ok::<String, String>("1".to_string());
      println!("{:?}", ok1);
      println!("{:?}", ok2);

      // println!("{:?}", ok1.equals(&ok2));
  }
#+END_SRC

#+RESULTS:
: Ok("1")
: Ok("1")

* 继承
** trait 的继承
#+BEGIN_SRC rust :exports both
  trait Parent {
      fn foo(&self) {
          //
      }
  }

  trait Child: Parent {
      fn bar(&self) {
          self.foo();
          //
      }
  }
#+END_SRC

#+RESULTS:
** 默认方法实现
#+BEGIN_SRC rust :exports both
  trait AAA {
      fn foo(&self) -> bool {
         true
      }
  }
#+END_SRC

#+RESULTS:

* 派生
** 派生入门
- 通过 ~#[derive(...)]~ 指定需要派生的 trait
- 如果有继承关系，需要同时派生其父 trait
#+BEGIN_SRC rust :exports both
  #[derive(Eq, PartialEq, Debug)]
  enum Result<T, E> {
      Ok<T>,
      Err<E>,
  }
#+END_SRC
** Clone
#+BEGIN_SRC rust :exports both
  #[derive(Clone)]
  struct Foo {
      x: i32,
  }

  #[derive(Clone)]
  struct Bar {
      x: Foo,
  }
#+END_SRC

#+RESULTS:
** 核心 trait
- Clone, Copy
- Debug
- Default
- Eq, PartialEq
- Hash
- Ord, PartialOrd
