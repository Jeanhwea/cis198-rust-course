#+TITLE: CIS198 Lecture 12: unsafe
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-13 Sat>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* unsafe
** safe vs unsafe
1. safe 保证的
   - Ownership
   - Type Checking
   - Memory safety rules
2. safe 不能保证的
   - Deadlock
   - Memory leak
   - Integer overflow
   - 退出是忘记调用 destructor
** unsafe 函数
1. unsafe block
2. unsafe function
#+BEGIN_SRC rust :exports both
  unsafe fn foo() {
      println!("foo");
  }

  // foo();

  unsafe {
      foo();
  }
#+END_SRC

#+RESULTS:
: foo

** borrow splitting
1. 结构体可以 borrow splitting
2. 但是 array 和 slice 却会造成问题
#+BEGIN_SRC rust :exports both
  #[derive(Debug)]
  struct Point {
      x: i32,
      y: i32,
  }

  fn main() {
      let mut p = Point { x: 1, y: 2 };
      let x1 = &mut p.x;
      let y1 = &mut p.y;
      ,*x1 += 1;
      ,*y1 += 1;
      println!("p = {:?}", p);
  }
#+END_SRC

#+RESULTS:
: p = Point { x: 2, y: 3 }

数组则不行，需要使用标准库中的 ~split_at_mut()~
#+BEGIN_SRC rust :exports both
  let mut arr = [1, 2, 3];
  let mut a1 = &mut arr[1];
  let mut a2 = &mut arr[2];
  ,*a1 = 444;
  println!("arr = {:?}", arr);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargo36Q6pK`.

#+BEGIN_EXAMPLE
  error[E0499]: cannot borrow `arr[_]` as mutable more than once at a time
   --> src/main.rs:5:14
    |
  4 | let mut a1 = &mut arr[1];
    |              ----------- first mutable borrow occurs here
  5 | let mut a2 = &mut arr[2];
    |              ^^^^^^^^^^^ second mutable borrow occurs here
  6 | *a1 = 444;
    | --------- first borrow later used here
    |
#+END_EXAMPLE

** raw pointer
1. ~*const T~ 不可变指针
   - 使用 ~null()~ 初始化
2. ~*mut T~ 可变指针
   - 使用 ~null_mut()~ 初始化
3. 解引用 raw pointer 是 unsafe 的

#+BEGIN_SRC rust :exports both
  let mut x = 0i32;
  // *const T
  let ptr1 = &x as *const i32;
  // *mut T
  let ptr2 = &mut x as *mut i32;

  let b1 = Box::new(1);
  let ptr3 = &*b1 as *const i32; // 不像 let b2 = b1; 这里没有消费 b1
  unsafe {
      println!("ptr3 = {:?}", *ptr3);
  }
  println!("b1 = {}", b1);
#+END_SRC

#+RESULTS:
: ptr3 = 1
: b1 = 1

raw pointer 的初始化
#+BEGIN_SRC rust :exports both
  let b1 = Box::new(123);
  let p2 = Box::into_raw(b1);

  unsafe {
      println!("ans = {:?}", *p2);
      drop(Box::from_raw(p2));
  }
#+END_SRC

#+RESULTS:
: ans = 123
