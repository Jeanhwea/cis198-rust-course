#+TITLE: Lecture 0: 预热
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-03-23 Sat>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* Hello World
#+BEGIN_SRC rust :exports both
  fn main() {
      println!("hello world from here");
  }
#+END_SRC

#+RESULTS:
: hello world from here

* 变量绑定
** 不可变性
- binding => 绑定
#+BEGIN_SRC rust :exports both
  let x = 12;
  x += 1;
#+END_SRC

#+RESULTS:
: error: Could not compile `cargo2AKCJn`.

** 可以重新绑定
#+BEGIN_SRC rust :exports both
  let x = 12;
  println!("{x}");
  let y = 2;
  let x = "xxx";
  println!("{x}");
#+END_SRC

#+RESULTS:
: 12
: xxx

** 模式可以绑定变量
#+BEGIN_SRC rust :exports both
  let (a, b) = (12, "abc");
  println!("{a}");
  println!("{b}");
#+END_SRC

#+RESULTS:
: 12
: abc

* 数组/切片/元组
** 数组
#+BEGIN_SRC rust :exports both
  let aa = [1, 2, 3];
  println!("{:?}", aa);
  let bb = [1; 4];
  println!("{:?}", bb);
#+END_SRC

#+RESULTS:
: [1, 2, 3]
: [1, 1, 1, 1]

** 切片 slice

#+BEGIN_SRC rust :exports both
  let arr = [1, 2, 3, 4,5];
  println!("{arr:?}");
  println!("{:?}", &arr[1..3]);
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]
: [2, 3]

** 字符串
1. ~String~ 堆分配
2. ~&str~ 静态

** tuple 元组
#+BEGIN_SRC rust :exports both
  let a = (1, 2);
  println!("{}", a.1);
#+END_SRC

#+RESULTS:
: 2
