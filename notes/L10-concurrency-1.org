#+TITLE: CIS198 Lecture 10: 并发 I
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-09 Tue>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 并发
1. 并行 parallel vs 并发 concurrency
2. 分时
3. 竞争
4. 哲学家问题

* 线程
** 创建线程
1. 线程 [[https://doc.rust-lang.org/std/thread/index.html][std::thread]]

#+BEGIN_SRC rust :exports both
  use std::thread;

  thread::spawn(|| {
      println!("hello");
  });
#+END_SRC

#+RESULTS:
: hello

** Join
#+BEGIN_SRC rust :exports both
  use std::thread;
  let handle = thread::spawn(|| "hello");
  println!("{:?}", handle.join());
#+END_SRC

#+RESULTS:
: Ok("hello")

** Thread
#+BEGIN_SRC rust :exports both
  let handle = thread::spawn(|| {
      println!("child thread = {:?}", thread::current());
      thread::park();
      println!("Good morning");
  });
  println!("parent thread = {:?}", thread::current());

  println!("Good night");
  handle.thread().unpark();

  // join
  handle.join().unwrap();
#+END_SRC

** 多线程，主线程 sleep
#+BEGIN_SRC rust :exports both
  use std::{thread, time::Duration};

  fn main() {
      for i in 0..10 {
          thread::spawn(move || {
              println!("aaa i = {}", i);
          });
      }

      thread::sleep(Duration::from_millis(1000));
  }
#+END_SRC

* ~Send~ & ~Sync~
1. ~Send~ trait 允许安全地在线程间传递所有权。
   - 即可以跨线程移动数据
   - 除了 ~Rc<T>~ 等极少数的类型，几乎所有的 Rust 类型都实现了 ~Send~
2. ~Sync~ trait 允许安全地在线程间传递不可变借用。
   - 即可以跨线程共享数据
   - 类型 ~Mutex<T>~ 是 Sync 的，可以被多个线程共享访问
   - 类型 ~RefCell<T>~ 不满足 Sync 约束
     #+BEGIN_SRC rust :exports both
       use std::cell::RefCell;
       use std::thread;

       let a = RefCell::new(1);
       thread::spawn(|| {
           a.borrow_mut(); // error[E0277]: `RefCell<i32>` cannot be shared between threads safely
       });
     #+END_SRC

     #+RESULTS:
     : error: Could not compile `cargoQt5Cpp`.
3. 它们都是 marker trait，仅用于标记
   - [[https://doc.rust-lang.org/std/marker/trait.Send.html][Send]] | [[https://doc.rust-lang.org/std/marker/trait.Sync.html][Sync]]
   - 它们都是 unsafe

* 共享线程状态
1. Arc 线程间共享
2. Mutex 线程安全的内部可变性
#+BEGIN_SRC rust :exports both
  use std::{
      sync::{Arc, Mutex},
      thread,
      time::Duration,
  };

  fn main() {
      let data = Arc::new(Mutex::new(vec![1, 2, 3]));

      for i in 0..3 {
          let data = data.clone();
          thread::spawn(move || {
              let mut data = data.lock().unwrap();
              data[i] += 1;
          });
      }

      thread::sleep(Duration::from_millis(1000));

      println!("data = {:?}", data.clone().lock().unwrap());
  }
#+END_SRC
