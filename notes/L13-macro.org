#+TITLE: CIS198 Lecture 13: 宏
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-13 Sat>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 语法扩展
1. ~#[foo]~ 和 ~#![foo]~ 属性
2. ~foo! arg~ 宏
   - ~foo!(...)~
   - ~foo![...]~
   - ~foo!{...}~
3. ~foo! arg1 arg2~
   - ~macro_rules! name {...}~ 定义宏

* 定义宏
#+BEGIN_SRC rust :exports both
  macro_rules! incr {
      ($x:ident) => {
          $x += 1;
      };
  }

  fn main() {
      let mut x = 0;

      incr!(x); // x += 1;

      println!("x = {x}");
  }
#+END_SRC

#+RESULTS:
: x = 1

* AST
#+BEGIN_SRC rust :exports both
  macro_rules! four {
      () => { 1 + 3 };
  }

  println!("ans = {:?}", four!());
#+END_SRC

#+RESULTS:
: ans = 4

* 宏
** 捕获
#+BEGIN_SRC rust :exports both
  macro_rules! twice {
      ( $e:expr ) => { { $e; $e } }
  }

  fn foo() { println!("foo"); }

  twice!(foo()); // => {foo(); foo()}
#+END_SRC

#+RESULTS:
: foo
: foo

** 重复
1. 重复用来重复模式
2. 形式 ~$ (...) sep rep~
   - ~$~ 开头
   - ~(...)~ 重复执行的模式串
   - sep 分割符，例如： ~,~ 和 ~;~
   - rep 重复的次数
     + ~*~ 零或多次
     + ~+~ 一或多次
#+BEGIN_SRC rust :exports both
  macro_rules! myvec {
      ( $( $elem:expr ) , * ) => {
          {
              let mut v = Vec::new();
              $( v.push($elem); )*
              v
          }
      }
  }

  println!("ans = {:?}", myvec![3, 4]);
#+END_SRC

#+RESULTS:
: ans = [3, 4]

** 卫生性
C 语言使用宏的例子
#+BEGIN_SRC C :includes '(<stdio.h>) :exports both
  #define USING_A(e) do { a = 42; e; } while(0)

  int main (int argc, char *argv[])
  {
      int a = 10;

      USING_A(a/10);

      printf("a = %d\n", a);
      return 0;
  }
#+END_SRC

#+RESULTS:
: a = 42

rust 干净又卫生
#+BEGIN_SRC rust :exports both
  macro_rules! using_a {
      ($e:expr) => { { let a = 42; $e } };
  }

  let a = 10;
  using_a!(a/10);
  println!("a = {:?}", a);
#+END_SRC

#+RESULTS:
: a = 10

如果 a 没有定义是无法编译通过
#+BEGIN_SRC rust :exports both
  macro_rules! using_a {
      ($e:expr) => { { let a = 42; $e } };
  }

  // let a = 40;
  let four = using_a!(a/10);
  println!("four = {:?}", four);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoztSXrx`.

** 调试
#+BEGIN_SRC rust :exports both
  #![feature(trace_macros)]
  macro_rules! each_tt {
      () => {};
      ( $_tt:tt $($rest:tt)* ) => {
          each_tt!( $($rest)* );
      };
  }

  fn main() {
      trace_macros!(true);
      each_tt!(aaa bbb ccc);
      trace_macros!(false);
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoIs1tGc`.

* 设计模式
** 回调
#+BEGIN_SRC rust :exports both
  macro_rules! call_with_larch {
      ($callback:ident) => { $callback!(larch) };
  }

  macro_rules! expand_to_larch {
      () => { larch };
  }

  macro_rules! recognize_tree {
      (larch) => { println!("#1, the Larch.") };
      (redwood) => { println!("#2, the Mighty Redwood.") };
      (fir) => { println!("#3, the Fir.") };
      (chestnut) => { println!("#4, the Horse Chestnut.") };
      (pine) => { println!("#5, the Scots Pine.") };
      ($($other:tt)*) => { println!("I don't know; some kind of birch maybe?") };
  }

  recognize_tree!(expand_to_larch!()); // 无法直接使用 `expand_to_larch!` 的展开结果
  call_with_larch!(recognize_tree);    // 回调就是给另一个宏传入宏的名称 (`ident`)，而不是宏的结果
#+END_SRC

#+RESULTS:
: I don't know; some kind of birch maybe?
: #1, the Larch.

** macro TT Munchers
#+BEGIN_SRC rust :exports both
  macro_rules! mixed_rules {
      () => {};
      (trace $name:ident; $($tail:tt)*) => {
          {
              println!(concat!(stringify!($name), " = {:?}"), $name);
              mixed_rules!($($tail)*);
          }
      };
      (trace $name:ident = $init:expr; $($tail:tt)*) => {
          {
              let $name = $init;
              println!(concat!(stringify!($name), " = {:?}"), $name);
              mixed_rules!($($tail)*);
          }
      };
  }

  let x = 1;
  let v = vec![1, 2, 3];

  mixed_rules!(
      trace x;
      trace v;
  );
#+END_SRC

#+RESULTS:
: x = 1
: v = [1, 2, 3]

* 更多参考
1. The Little Book of Rust Macros | [[https://danielkeep.github.io/tlborm/book/README.html][link]] | [[https://villezuo.gitee.io/tlborm/index.html][zh]]
