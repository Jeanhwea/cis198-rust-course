#+TITLE: CIS198 Lecture 10: 并发 I
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-09 Tue>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 并发
1. 并行 parallel vs 并发 concurrency
2. 分时
3. 竞争
4. 哲学家问题

* 线程
** 创建线程
1. 线程 [[https://doc.rust-lang.org/std/thread/index.html][std::thread]]

#+BEGIN_SRC rust :exports both
  use std::thread;

  thread::spawn(|| {
      println!("hello");
  });
#+END_SRC

#+RESULTS:
: hello

** Join
#+BEGIN_SRC rust :exports both
  use std::thread;
  let handle = thread::spawn(|| "hello");
  println!("{:?}", handle.join());
#+END_SRC

#+RESULTS:
: Ok("hello")

** Thread
#+BEGIN_SRC rust :exports both
  let handle = thread::spawn(|| {
      thread::park();
      println!("aaa");
  });
  println!("bbb");

  println!("curr = {:?}", thread::current());

  handle.thread().unpark();

  handle.join().unwrap();
#+END_SRC

* Send & Sync
1. 实现了 Send 的类型，可以安全地在线程间传递所有权。
   - 也就是说，可以跨线程移动
2. 实现了 Sync 的类型，可以安全地在线程间传递不可变借用。
   - 也就是说，可以跨线程共享
