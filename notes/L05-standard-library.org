#+TITLE: CIS198 Lecture 5: 标准库
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-01 Mon>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil


* 字符串
** 字符串类型
1. rust 的字符串比较复杂
   - Unicode 编码序列
   - 不是以 null/ ~\0~ 结尾的数据
2. 通常我们使用的有两种字符串： ~&str~ 和 ~String~

** ~&str~ 类型
1. ~&str~ 是字符串切片（有点像数组切片）
2. ~"string literals"~ 是 ~&str~ ，通常是 ~&'static str~
3. ~&str~ 是静态分配的，并且必须是定长的
4. 不要使用数组下标的方式 ~s[i]~ 访问字符串，因为 Unicode 可能包括多字节字符

如果需要访问使用 ~chars()~ 迭代访问
#+BEGIN_SRC rust :exports both
  for ch in "我 ❤ rust".chars() {
      println!("{:?}", ch);
  }
#+END_SRC

#+RESULTS:
: '我'
: ' '
: '❤'
: ' '
: 'r'
: 'u'
: 's'
: 't'

** ~String~ 类型
1. ~String~ 是堆分配的，可以动态增长，它其实是 ~Vec<u8>~ 的包裹
2. ~String~ 不能使用数组下标索引，需要调用 ~s.nth(i)~
3. 可以通过引用 ~String~ 来创建 ~&str~
   - 注意： ~str~ 是 ~Unsized~ 类型，它在编译时不可用，所以一般只用其引用，即 ~&str~

#+BEGIN_SRC rust :exports both
  let s0: String = String::new();
  let s1: String = "foo".to_string();
  let s2: String = String::from("bar");
  let s3: &str = &s0;
  let s4: &str = &s1;

  println!("s0 = {:?}", s0);
  println!("s1 = {:?}", s1);
  println!("s2 = {:?}", s2);
  println!("s3 = {:?}", s3);
  println!("s4 = {:?}", s4);
#+END_SRC

#+RESULTS:
: s0 = ""
: s1 = "foo"
: s2 = "bar"
: s3 = ""
: s4 = "foo"

** 字符串的一些操作
#+BEGIN_SRC rust :exports both
  let s1 = "aaa".to_string();
  println!("s1 = {:?}", s1);
  let s2 = s1 + "bbb";
  println!("s2 = {:?}", s2);
#+END_SRC

#+RESULTS:
: s1 = "aaa"
: s2 = "aaabbb"

两个 ~String~ 拼接会出错，需要将后面的转成 ~&str~
#+BEGIN_SRC rust :exports both
  let s1 = String::from("aaa");
  let s2 = String::from("bbb");
  let s3 = s1 + s2;
  println!("s3 = {:?}", s3);
#+END_SRC

#+BEGIN_EXAMPLE
  error[E0308]: mismatched types
   --> src/main.rs:5:15
    |
  5 | let s3 = s1 + s2;
    |               ^^ expected `&str`, found `String`
    |
  help: consider borrowing here
    |
  5 | let s3 = s1 + &s2;
    |               +
#+END_EXAMPLE

后面的字符串需要转成 ~&str~
#+BEGIN_SRC rust :exports both
  let s1 = String::from("aaa");
  let s2 = String::from("bbb");
  let s3 = s1 + &s2;
  println!("s3 = {:?}", s3);
#+END_SRC

#+RESULTS:
: s3 = "aaabbb"

两个 ~&str~ 无法拼接，下面的代码时错误的
#+BEGIN_SRC rust :exports both
  let s1 = "aaa" + "bbb";
#+END_SRC

#+BEGIN_EXAMPLE
  error[E0369]: cannot add `&str` to `&str`
   --> src/main.rs:3:16
    |
  3 | let s1 = "aaa" + "bbb";
    |          ----- ^ ----- &str
    |          |     |
    |          |     `+` cannot be used to concatenate two `&str` strings
    |          &str
    |
    = note: string concatenation requires an owned `String` on the left
#+END_EXAMPLE

修复后
#+BEGIN_SRC rust :exports both
  let s1 = "aaa".to_owned() + "bbb";
  println!("s1 = {:?}", s1);
#+END_SRC

* Option
** Option 使用
#+BEGIN_SRC rust :exports both
  let opt1:Option<i32> = None;
  match opt1 {
      None => println!("nothing"),
      Some(v) => println!("v = {v}")
  }
#+END_SRC

#+RESULTS:
: nothing

** Option::unwrap
#+BEGIN_SRC rust :exports both
  // let opt1:Option<i32> = Some(123);
  let opt1:Option<i32> = None;
  println!("v = {}", opt1.unwrap())
#+END_SRC

#+RESULTS:
: cargospm6v6

** Option::map()
映射包裹里面的值
#+BEGIN_SRC rust :exports both
  // let opt1: Option<i32> = None;
  let opt1: Option<i32> = Some(3);
  println!("opt1 = {:?}", opt1);
  let opt2 = opt1.map(|x| x + 1);
  println!("opt2 = {:?}", opt2);
#+END_SRC

#+RESULTS:
: opt1 = Some(3)
: opt2 = Some(4)

** Option::and_then()
1. 于 map 的区别是返回值需要包裹 Some
#+BEGIN_SRC rust :exports both
  let opt1: Option<i32> = Some(3);
  println!("opt1 = {:?}", opt1);
  let opt2 = opt1.and_then(|x| Some(x + 1));
  println!("opt2 = {:?}", opt2);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoDVNc2C`.
** Option::unwrap_or()
提供默认值
#+BEGIN_SRC rust :exports both
  let base = 3;
  // let opt1: Option<i32> = Some(3);
  let opt1: Option<i32> = None;
  // println!("ans = {}", opt1.unwrap_or(999));
  println!("ans = {}", opt1.unwrap_or_else(|| base + 5));
#+END_SRC

#+RESULTS:
: ans = 8

* Result 错误处理
#+BEGIN_SRC rust :exports both
  fn foo() -> Result<i32, String> {
      // Result::Ok(1)
      Result::Err("xxx".to_string())
  }

  match foo() {
      Ok(code) => println!("code = {code}"),
      Err(msg) => println!("msg = {msg}"),
  }
#+END_SRC

#+RESULTS:
: msg = xxx

anyhow 库做错误处理

# error: use of deprecated `try` macro
#+BEGIN_SRC rust :exports both
  fn foo() -> Result<i32, String> {
      // Result::Ok(1)
      Result::Err("xxx".to_string())
  }

  fn bar() -> Result<i32, String> {
      // let ans = try!(foo());
      let ans = foo()?;
      // println!("ans = {:?}", ans);
      Ok(ans)
  }

  let aa = bar();
  println!("{:?}", aa);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoZbtxiL`.

* 集合
** ~Vec<T>~
1. 变长数组
#+BEGIN_SRC rust :exports both
  let mut vec = Vec::new();
  vec.push(1);
  vec.push(2);

  assert_eq!(vec.len(), 2);
  assert_eq!(vec[0], 1);

  assert_eq!(vec.pop(), Some(2));
  assert_eq!(vec.len(), 1);

  vec[0] = 7;
  assert_eq!(vec[0], 7);

  vec.extend([1, 2, 3]);

  for x in &vec {
      println!("{x}");
  }
  assert_eq!(vec, [7, 1, 2, 3]);
#+END_SRC

#+RESULTS:
: 7
: 1
: 2
: 3

** ~VecDeque<T>~
1. 双向队列 [[https://doc.rust-lang.org/std/collections/struct.VecDeque.html][link]]
2. 双端队列使用可扩张的 环形缓冲器 实现

** ~LinkedList<T>~
1. 双向链表 [[https://doc.rust-lang.org/std/collections/struct.LinkedList.html][link]]

** ~HashMap<K,V>~ / ~BTreeMap<K,V>~
1. 哈希表 [[https://doc.rust-lang.org/std/collections/struct.HashMap.html][link]]
2. B 树表，其排列的 key 是有序的

** ~HashSet<K,V>~ / ~BTreeSet<K,V>~
1. 哈希集合
2. B 树集合

** ~BinaryHeap<T>~
1. 优先队列 [[https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html][link]]

* 迭代器
Iterator | [[https://doc.rust-lang.org/std/iter/trait.Iterator.html][link]]

* 函数式
** collect
- ~::<>~
#+BEGIN_SRC rust :exports both
  use std::collections::VecDeque;

  let a = [1, 2, 3];
  // let ans: Vec<i32> = a.iter().map(|&x| x * 2).collect();
  // let ans = a.iter().map(|&x| x * 2).collect::<Vec<i32>>();
  let ans: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();
  println!("ans = {:?}", ans);
#+END_SRC

#+RESULTS:
: ans = [2, 4, 6]

** fold
- 折叠一个迭代器
#+BEGIN_SRC rust :exports both
  let nums = vec![1, 2, 3, 4, 5];
  let sum = nums.iter().fold(0, |acc, &x| acc + x);
  println!("sum = {sum}");
#+END_SRC

#+RESULTS:
: sum = 15

** filter
- 过滤一下集合
- predicate（谓词）
  + 闭包
  + 返回值必须是布尔型 : true/false
#+BEGIN_SRC rust :exports both
  let nums = vec![1, 2, 3, 4, 5];
  let ans: Vec<&i32> = nums.iter().filter(|&x| *x % 2 == 1).collect();
  println!("{ans:?}");
#+END_SRC

#+RESULTS:
: [1, 3, 5]

** find & position
#+BEGIN_SRC rust :exports both
  let nums = vec![9, 9, 8, 1, 2, 3, 4, 5];
  println!("{:?}", nums.iter().find(|&x| *x==3));
  println!("{:?}", nums.iter().find(|&x| *x==13));
  println!("{:?}", nums.iter().position(|&x| x==1));
  println!("{:?}", nums.iter().position(|&x| x==11));
#+END_SRC

#+RESULTS:
: Some(3)
: None
: Some(3)
: None

** skip
- 跳过 n 个迭代元素
#+BEGIN_SRC rust :exports both
  let nums = vec![9, 9, 8, 1, 2, 3, 4, 5];
  println!("{:?}", nums.iter().skip(9).position(|&x| x==9));
#+END_SRC

#+RESULTS:
: None

** zip
- 打包两个迭代器
- 最终长度取短的
#+BEGIN_SRC rust :exports both
  let a1 = [1, 2, 3];
  let a2 = [4, 5, 6];

  let mut iter = a1.iter().zip(a2.iter());
  println!("{:?}", iter.collect::<Vec<_>>());
#+END_SRC

#+RESULTS:
: [(1, 4), (2, 5), (3, 6)]

** enumerate
#+BEGIN_SRC rust :exports both
  let num = vec![8, 3, 23];
  // for (i, v) in enumerate!(num) {
  //     println!("{i} -> {v}");
  // }
  for (i, v) in num.iter().enumerate() {
      println!("{i} -> {v}");
  }
#+END_SRC

#+RESULTS:
: 0 -> 8
: 1 -> 3
: 2 -> 23
