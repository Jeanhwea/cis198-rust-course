#+TITLE: CIS198 Lecture 11: 并发 II
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-04-12 Fri>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 并发原语
** RwLock
1. RwLock | [[https://doc.rust-lang.org/std/sync/struct.RwLock.html][link]]
2. 读写锁
3. ~read()~ 读取方法
4. ~write()~ 写入方法
5. [[https://doc.rust-lang.org/std/sync/struct.Mutex.html#poisoning][Poisoning]] like Mutex
#+BEGIN_SRC rust :exports both
  use std::sync::RwLock;

  let lock = RwLock::new(5);

  // many reader locks can be held at once
  {
      let r1 = lock.read().unwrap();
      let r2 = lock.read().unwrap();
      assert_eq!(*r1, 5);
      assert_eq!(*r2, 5);
  } // read locks are dropped at this point

  // only one write lock may be held, however
  {
      let mut w = lock.write().unwrap();
      ,*w += 1;
      assert_eq!(*w, 6);
  } // write lock is dropped here
#+END_SRC

#+RESULTS:

** Barrier
1. Barrier | [[https://doc.rust-lang.org/std/sync/struct.Barrier.html][link]]
2. ~wait()~ 方法进行同步
#+BEGIN_SRC rust :exports both
  use std::{
      sync::{Arc, Barrier},
      thread,
  };

  fn main() {
      let n = 10;
      let mut handles = Vec::with_capacity(n);
      let barrier = Arc::new(Barrier::new(n));
      for _ in 0..n {
          let c = Arc::clone(&barrier);
          handles.push(thread::spawn(move || {
              println!("before");
              c.wait();
              println!("after");
          }));
      }

      for handle in handles {
         handle.join().unwrap();
      }
  }
#+END_SRC

** CondVar
1. CondVar | [[https://doc.rust-lang.org/std/sync/struct.Condvar.html][link]]
2. ~wait()~
3. ~notify_all()~
#+BEGIN_SRC rust :exports both
  use std::sync::{Arc, Condvar, Mutex};
  use std::thread;

  fn main() {
      let pair = Arc::new((Mutex::new(false), Condvar::new()));
      let pair2 = Arc::clone(&pair);

      // Inside of our lock, spawn a new thread, and then wait for it to start.
      thread::spawn(move || {
          let (lock, cvar) = &*pair2;
          let mut started = lock.lock().unwrap();
          ,*started = true;
          // We notify the condvar that the value has changed.
          cvar.notify_one();
      });

      // Wait for the thread to start up.
      let (lock, cvar) = &*pair;
      let mut started = lock.lock().unwrap();
      while !*started {
          started = cvar.wait(started).unwrap();
      }
  }
#+END_SRC

** Once
1. Once | [[https://doc.rust-lang.org/std/sync/struct.Once.html][link]]
2. ~call_once()~
#+BEGIN_SRC rust :exports both
  use std::sync::Once;

  static INIT: Once = Once::new();
  for _ in 0..10 {
      INIT.call_once(|| {
          println!("xxx");
      });
  }
#+END_SRC

#+RESULTS:
: xxx

* 原子变量
** atomic
1. atomic | [[https://doc.rust-lang.org/std/sync/atomic/index.html][link]]
2. CAS (compare and swap)
3. 原子性
#+BEGIN_SRC rust :exports both
  use std::sync::atomic::{AtomicUsize, Ordering};
  use std::sync::Arc;
  use std::{hint, thread};

  fn main() {
      let spinlock = Arc::new(AtomicUsize::new(1));

      let spinlock_clone = Arc::clone(&spinlock);

      let thread = thread::spawn(move || {
          spinlock_clone.store(0, Ordering::Release);
      });

      // Wait for the other thread to release the lock
      while spinlock.load(Ordering::Acquire) != 0 {
          hint::spin_loop();
      }

      if let Err(panic) = thread.join() {
          println!("Thread had an error: {panic:?}");
      }
  }
#+END_SRC

* rayon
** 使用 rayon
#+BEGIN_SRC sh
  cargo add rayon
#+END_SRC

#+BEGIN_SRC rust :exports both
  use rayon::iter::{IntoParallelRefMutIterator, ParallelIterator};

  let mut x = vec![1, 2, 3];
  x.par_iter_mut().for_each(|p| *p += 1);
  println!("x = {:?}", x);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargooiPibJ`.

** 分治
#+BEGIN_SRC rust :exports both
  fn inc(slice: &mut [i32]) {
      if slice.len() < 10 {
          for p in slice {
              ,*p += 1;
          }
      } else {
          let mid = slice.len() / 2;
          let (left, right) = slice.split_at_mut(mid);
          rayon::join(|| inc(left), || inc(right));
      }
  }

  fn main() {
      let mut x = vec![1; 100];
      inc(&mut x);
      println!("x = {:?}", x);
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoMEjli2`.

* scoped thread
标准库中通用的线程 ~thread::spawn()~
因为存在 ~F: 'static~ 这样的限制，
所以无法在子线程中借用主线程作用域中的局部变量。
所以只能使用 ~move~ 关键字将主线程的局部变量移动到子线程中

[[https://doc.rust-lang.org/stable/std/thread/fn.scope.html][link]]

#+BEGIN_SRC rust :exports both
  let greeting = String::from("Hello world!");

  let handle1 = thread::spawn({
      let greeting = greeting.clone();
      move || {
          println!("thread #1 says: {}", greeting);
      }
  });

  let handle2 = thread::spawn(move || {
      println!("thread #2 says: {}", greeting);
  });

  handle1.join().unwrap();
  handle2.join().unwrap();
#+END_SRC

Scoped Thread 就可以打破上面的限制
#+BEGIN_SRC rust :exports both
  use std::thread;

  fn main(){
      let mut a = vec![1, 2, 3];
      let mut x = 0;

      thread::scope(|s| {
          s.spawn(|| {
              println!("hello from the first scoped thread");
              // We can borrow `a` here.
              dbg!(&a);
          });
          s.spawn(|| {
              println!("hello from the second scoped thread");
              // We can even mutably borrow `x` here,
              // because no other threads are using it.
              x += a[0] + a[2];
          });
          println!("hello from the main thread");
      });

      // After the scope, we can modify and access our variables again:
      a.push(4);
      assert_eq!(x, a.len());
  }
#+END_SRC

#+RESULTS:
: hello from the main thread
: hello from the first scoped thread
: [src/main.rs:12:13] &a = [hello from the second scoped thread
:
:     1,
:     2,
:     3,
: ]

标准库中支持 Scoped Thread 有优点也有缺点：
- 优点：
  1. 这是一个常用且很实用的工具。
  2. 标准库提供一个统一的可靠实现，相比于个人自己实现更靠谱。
  3. 相比于使用 thread::spawn，不会有泄漏的风险。
- 缺点:
  1. 就是会使标准库变大
