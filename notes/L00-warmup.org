#+TITLE: Lecture 0: 预热
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-03-23 Sat>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* Hello World
#+BEGIN_SRC rust :exports both
  fn main() {
      println!("hello world from here");
  }
#+END_SRC

#+RESULTS:
: hello world from here

* 变量绑定 variable binding
** 不可变性
- binding => 绑定
#+BEGIN_SRC rust :exports both
  let x = 12;
  x += 1;
#+END_SRC

#+RESULTS:
: error: Could not compile `cargo2AKCJn`.

添加 ~mut~ 关键字来修改变量的可变性
#+BEGIN_SRC rust :exports both
  let mut x = 12;
  x += 1;
  println!("{}", x);
#+END_SRC

#+RESULTS:
: 13

** 可以重新绑定
#+BEGIN_SRC rust :exports both
  let x = 12;
  println!("{x}");
  let y = 2;
  let x = "xxx";
  println!("{x}");
#+END_SRC

#+RESULTS:
: 12
: xxx

** 模式可以绑定变量
#+BEGIN_SRC rust :exports both
  let (a, b) = (12, "abc");
  println!("{a}");
  println!("{b}");
#+END_SRC

#+RESULTS:
: 12
: abc

* 表达式 expression
- ~()~ 表示 unit 类型， unit 类型只包含一个值，即  ~()~
#+BEGIN_SRC rust :exports both
  fn foo() -> i32 { 5 }
  fn bar() -> () { () }
  fn baz() -> () { 5; }
  fn qux()       { 5; }
#+END_SRC

#+RESULTS:

- if 表达式举例
#+BEGIN_SRC rust :exports both
  let x = -5;
  let y = if x > 0 { "greater" } else { "less" };
  println!("x = {} is {} than zero", x, y);
#+END_SRC

#+RESULTS:
: x = -5 is less than zero

* 类型 type
** 数组 array
#+BEGIN_SRC rust :exports both
  let aa = [1, 2, 3];
  println!("{:?}", aa);
  let bb = [1; 4];
  println!("{:?}", bb);
#+END_SRC

#+RESULTS:
: [1, 2, 3]
: [1, 1, 1, 1]

#+BEGIN_SRC rust :exports both
  let aa = [0, 0, 0];
  let bb = [0; 3];
  println!("{:?}", aa == bb);
  println!("{:p}", &aa);
  println!("{:p}", &bb);
#+END_SRC

#+RESULTS:
: true
: 0x7ff7bd106c7c
: 0x7ff7bd106c88

** 切片 slice

#+BEGIN_SRC rust :exports both
  let arr = [1, 2, 3, 4,5];
  println!("{arr:?}");
  println!("{:?}", &arr[1..3]);
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]
: [2, 3]

** 字符串 string
1. ~String~ 堆分配
2. ~&str~ 静态

** 元组 tuple
#+BEGIN_SRC rust :exports both
  let a = (1, 2);
  println!("{}", a.1);
#+END_SRC

#+RESULTS:
: 2

** 类型转换 Casting
#+BEGIN_SRC rust :exports both
  let x = 100;
  let y = x as i8;
  println!("{}", y);
#+END_SRC

#+RESULTS:
: 100

** 向量 Vec<T>
- verctor
#+BEGIN_SRC rust :exports both
  let v1 = vec![1, 2, 3];
  println!("{:?}", v1);
  let v2: Vec<i32> = Vec::new();
  println!("{:?}", v2);
#+END_SRC

#+RESULTS:
: [1, 2, 3]
: []


vec 支持操作
#+BEGIN_SRC rust :exports both
  // v1 and v2 are equal
  let mut v1 = Vec::new();
  v1.push(1);
  v1.push(4);
  v1.push(3);
  // println!("{:?}", v1);

  let v2 = vec![1, 2, 3];
  // v3 and v4 are equal
  let v3 = vec![0; 4];
  let v4 = vec![0, 0, 0, 0];
  // println!("{:?}", v3);
  // println!("{:?}", v4);
  // println!("{:?}", v3 == v4);
  // println!("{:p}", &v3);
  // println!("{:p}", &v4);

  println!("{:?}", v2);
  let idx: i32 = 2;
  println!("{}", v2[idx as usize]);
#+END_SRC

#+RESULTS:
: [1, 2, 3]
: 3

** 引用 references
- references 引用 ~&~
- dereferences 解引用 ~*~
#+BEGIN_SRC rust :exports both
  let x = 12;
  let ref_x = &x;
  println!("{}", *ref_x);
  println!("{:p}", ref_x);
  println!("{:p}", &x);
#+END_SRC

#+RESULTS:
: 12
: 0x7ff7b4119c9c
: 0x7ff7b4119c9c

* 控制流 Control Flow
** If 语句
#+BEGIN_SRC rust :exports both
  let x = 0;
  if x > 0 {
      10
  } else if x == 0 {
      0
  } else {
      println!("Not greater than zero!");
      -10
  };
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC rust :exports both
  let x = 1;
  let y = if x <= 0 {println!("Too Small")};
  println!("{:?}", y);
#+END_SRC

#+RESULTS:
: ()
** 循环语句
*** while 循环
#+BEGIN_SRC rust :exports both
  let mut x = 0;
  while x < 3 {
      x += 1;
      println!("x: {}", x);
  }
#+END_SRC

#+RESULTS:
: x: 1
: x: 2
: x: 3

*** 死循环
#+BEGIN_SRC rust :exports both
  let mut x = 0;
  loop {
      x += 1;
      println!("x: {}", x);
      if x > 3 { break; }
  }
#+END_SRC

#+RESULTS:
: x: 1
: x: 2
: x: 3
: x: 4

*** for 循环
1. ~1..3~ 打印 [1, 2]
2. ~1..=3~ 打印 [1, 2, 3]
3. for 循环数组
#+BEGIN_SRC rust :exports both
  for x in 1..=3 {
      println!("{x}");
  }

  let arr = [2, 4, 6];
  for n in &arr {
     println!("n = {n}");
  }

  let vec1 = vec![2, 4, 6];
  for x in &vec1 {
     println!("x = {x}");
  }
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: n = 2
: n = 4
: n = 6
: x = 2
: x = 4
: x = 6
** 函数 Functions
*** 函数
#+BEGIN_SRC rust :exports both
  fn square(x: i32) -> i32 {
      if x < 3 { return x; }
      x * x
  }

  fn main() {
      for n in 1..=5 {
          println!("n={n}, ans={}", square(n));
      }
  }
#+END_SRC

#+RESULTS:
: n=1, ans=1
: n=2, ans=2
: n=3, ans=9
: n=4, ans=16
: n=5, ans=25

错误的写法
#+BEGIN_EXAMPLE
  2 | fn square(x: i32) -> i32 {
    |    ------            ^^^ expected `i32`, found `()`
    |    |
    |    implicitly returns `()` as its body has no tail or `return` expression
  3 |     x * x;
    |          - help: remove this semicolon to return this value
#+END_EXAMPLE
#+BEGIN_SRC rust :exports both
  fn square(x: i32) -> i32 {
      x * x;
  }

  fn main() {
      for n in 1..=5 {
          println!("n={n}, ans={}", square(n));
      }
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoWkMriS`.

*** 函数对象
#+BEGIN_SRC rust :exports both
  fn square(x: i32) -> i32 {
      x * x
  }

  // let fp: fn(i32) -> i32 = square;
  let fp = square;
  println!("{}", fp(6));
#+END_SRC

#+RESULTS:
: 36

#+BEGIN_SRC rust :exports both
  fn square(x: i32) -> i32 {
      x * x
  }

  fn apply_twice(f: &dyn Fn(i32) -> i32, n: i32) -> i32 {
      f(f(n))
  }

  // f(f(3)) = f(9) = 81
  println!("{}", apply_twice(&square, 3));
#+END_SRC

#+RESULTS:
: error: Could not compile `cargo1aTRN2`.
** 宏 macro!
1. 以 ~!~ 结尾
2. 使用时和函数很像 ~println!(...)~
#+BEGIN_SRC rust :exports both
  fn fun01 () {
      unimplemented!();
  }

  // fun01(); // 如果调用 panic
#+END_SRC

#+RESULTS:
: cargoryVdoV

** match 语句
#+BEGIN_SRC rust :exports both
  let x = 4;
  match x {
      1 => println!("one fish"),
      2 => {
          println!("two fish");
          println!("two fish");
      },  // <- comma optional when using braces
      _ => println!("no fish for you"), // "otherwise" case
  }
#+END_SRC

#+RESULTS:
: no fish for you

match 匹配元组，带条件，复杂模式匹配
#+BEGIN_SRC rust :exports both
    let x = 22;
    let y = -33;
    match (x, y) {
        (1, 1) => println!("one"),
        (2, j) => println!("two, {}", j),
        (_, 3) => println!("three"),
        (i, j) if i > 5 && j < 0 => println!("On guard!"),
        (_, _) => println!(":<"),
    }
#+END_SRC

#+RESULTS:
: On guard!

* 开发环境和工具
** rustc 编译器
1. 一次只能有一个输入文件 ~main.rs~ / ~lib.rs~
2. 大部分不直接使用 rustc
** cargo
1. cargo new
2. cargo build
3. cargo run

* 附录：环境配置
** lsp 配置
#+BEGIN_SRC sh
  rustup component add rust-analyzer
#+END_SRC

** cargo 项目管理相关
创建项目
#+BEGIN_SRC sh
  cargo new myapp
  cargo new --lib mylib
#+END_SRC

添加包
#+BEGIN_SRC sh
  cargo add config
  cargo add clap --features derive
#+END_SRC

编译运行
#+BEGIN_SRC sh
  cargo build
  cargo build --release
  cargo run -- -h
#+END_SRC
