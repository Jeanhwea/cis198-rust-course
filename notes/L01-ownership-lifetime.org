#+TITLE: Lecture 1: 所有权和生命周期
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-03-24 Sun>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil


* 所有权
** 所有权
#+BEGIN_SRC rust :exports both
  let mut v1 = vec![1, 2, 3];

  // scope
  {
      v1.pop();
      println!("{:?}", v1);
      v1.push(6);
      println!("{:?}", v1);
  } // end of scope

  println!("{:?}", v1);
#+END_SRC

#+RESULTS:
: [1, 2]
: [1, 2, 6]
: [1, 2, 6]

** move 语义
#+BEGIN_SRC rust :exports both
  let x = vec![1, 2, 3];
  // println!("{:?}", x);

  let y = x;
  println!("{:?}", x);
  // println!("{:?}", y);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargonsyXLM`.

** 所有权返回
#+BEGIN_SRC rust :exports both
  fn vector_length(v: Vec<i32>) -> Vec<i32> {
      println!("len = {:?}", v.len());
      v
  }

  fn main() {
      let mut v1 = vec![1, 2, 3];
      v1 = vector_length(v1);
      println!("{:?}", v1);
  }
#+END_SRC

#+RESULTS:
: len = 3
: [1, 2, 3]

** 借用
- 所有: 只能一个所有
- 借用：可以是多个借用
#+BEGIN_SRC rust :exports both
  let v1 = vec![1, 2, 3];

  // let v2 = v1;
  // let v2 = v1.clone();
  let v2 = &v1; // 发生了借用
  let v3 = &v1; // 发生了借用

  println!("{v2:?}");
  println!("{v3:?}");
  println!("{v1:?}");
#+END_SRC

#+RESULTS:
: [1, 2, 3]
: [1, 2, 3]
: [1, 2, 3]

** 借用后再 move 会报错
#+BEGIN_SRC rust :exports both
  let v1 = vec![1, 2, 3];

  let v2 = &v1; // 发生了借用 v2
  let v3 = v1;  // 借用过后还可以转移所有权

  println!("{v2:?}");  // 但是不能再使用了
  // println!("{v3:?}");
  // println!("{v1:?}");
#+END_SRC

#+RESULTS:
: error: Could not compile `cargo04KYls`.

** 包含函数的借用
- 过了作用域会返回借用的数据区
#+BEGIN_SRC rust :exports both
  fn vec_len(v: &Vec<i32>) -> usize {
      v.len()
  }

  let v1 = vec![1, 2, 3, 8];
  println!("{:?}", vec_len(&v1));

  let v2 = v1;
  println!("{v2:?}");
#+END_SRC

#+RESULTS:
: 4
: [1, 2, 3, 8]

** 可变借用
- 过了作用域会返回借用的数据区
- 默认不可变(mutable) => ~mut~
#+BEGIN_SRC rust :exports both
  fn push(v: &mut Vec<i32>, x: i32) {
      v.push(x)
  }

  let mut v1: Vec<i32> = vec![1, 2];
  push(&mut v1, 7);
  println!("{:?}", v1);
#+END_SRC

#+RESULTS:
: [1, 2, 7]

** 可变借用后的变量不可解引用
#+BEGIN_SRC rust :exports both
  fn push2(v: &mut Vec<i32>, x: i32) {
      // error[E0507]: cannot move out of `*v` which is behind a mutable reference
      let v2 = *v; // 这里是错误的

      v2.push(x)
  }

  let mut v1 = vec![1, 2];
  push2(&mut v1, 4);
  println!("{:?}", v1);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoLOfpQD`.

** 可变借用后自动解引用
#+BEGIN_SRC rust :exports both
  fn vec_len(v: &&Vec<i32>) -> usize {
      // let v1 = *v;
      // v1.len()
      v.len()
  }

  let v1 = vec![1, 2, 3, 8, 9];
  println!("{:?}", vec_len(&&&&&&&&&&&&&v1));
#+END_SRC

#+RESULTS:
: 5

* 回顾
** 概念
1. ownership 所有权
2. borrow 借用
3. move 所有权转换
4. mutable 可变性
5. dereference 解引用
6. scope 作用域
7. iter 迭代器
   - iter()
   - iter_mut()
   - into_iter()
** 解引用：混淆场景
#+BEGIN_SRC rust :exports both
  let mut a = 5;
  let ref_a = &mut a;
  ,*ref_a = 4;
  println!("{}", *ref_a + 4);
#+END_SRC

#+RESULTS:
: 8
** ref 关键字
#+BEGIN_SRC rust :exports both
  let mut v = vec![0];
  {
      let v1 = &v;
      let ref v2 = v;
      println!("{:p}", v1);
      println!("{:p}", v2);
  }

  // let v3 = &mut v;
  let ref mut v3 = v;
  v3.push(3);
  println!("{:?}", v3);
  println!("{:?}", v);
#+END_SRC

#+RESULTS:
: 0x7ff7b9c03c00
: 0x7ff7b9c03c00
: [0, 3]
: [0, 3]
** ref 和 match 语句

#+BEGIN_SRC rust :exports both
  let mut vectors = (vec![0], vec![1]);
  match vectors {
      (v1, ref mut v2) => {
          (*v1).len();
          v2.push(2);
      }
  }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC rust :exports both
  let mut vectors = (vec![0], vec![1]);
  match vectors {
      (ref v1, ref mut v2) => {
          v1.len();
          v2.push(2);
      }
  }
#+END_SRC

#+RESULTS:

** Copy Types
1. i32 是可以 Copy Trait， 可以复制
#+BEGIN_SRC rust :exports both
  let x:i32 = 23;
  let y = x; // 并没有发生 move, 而是 copy
  println!("{}", x);
#+END_SRC

#+RESULTS:
: 23

- ~&str~ 实现了 Copy
- ~String~ 没实现了 Copy
#+BEGIN_SRC rust :exports both
  // let x = "1234".to_string();
  let x = "abc";
  let y = x; // String=>move, &str=>copy
  println!("{:?}", x);
#+END_SRC

#+RESULTS:
: "abc"

* 借用的规则
1. You can't keep borrowing something after it stops existing.
2. 可以有多个 不可变引用 (immutable reference)
3. 只能有一个 可变引用 (mutable reference)
* 非法案例
** 借用+迭代删除
error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable
#+BEGIN_SRC rust :exports both
  let mut v = vec![1, 2, 3];
  for e in &v { // 不可变借用
      // println!("{}", e);
      v.pop(); // pop 可变借用
  }
#+END_SRC

#+RESULTS:
: error: Could not compile `cargoDEe67e`.

** 悬挂指针
error[E0597]: `x` does not live long enough
#+BEGIN_SRC rust :exports both
  let y: &i32;
  {
      let x: i32 = 3;
      y = &x;
  }
  println!("{:?}", y);
#+END_SRC

#+RESULTS:
: error: Could not compile `cargohZPdfN`.

修改方式
#+BEGIN_SRC rust :exports both
  let y: &i32;
  let x: i32 = 3;
  y = &x;
  println!("{:?}", y);
#+END_SRC

#+RESULTS:
: 3

* 更多例子
[[file:../a2_ownership_lifetime/src/main.rs]]

* 总结：
** 心智模型（Mental Models）
1. ownership
2. transfer ownership (by varible binding)
   1. move (too expensive)
      - NO modifing the object
   2. Copy types (primary types: i8, i32, u8, u32 ...), Copy must Clone
      - duplicated data on stack
   3. Clone
      - duplicated data on heap
3. no transfer, borrow (by reference)
   - immutable
   - mutable
     1) auto-deference
        1. SAFETY, prevent deference mutable_borrow
        2. ambiguous? => need your choose
     2) reuse? (exact one mutable_borrow)


 1. ownership
 2. 所有权转移 by 变量绑定
    - move
    - copy
    - clone
 3. 所有权不转移（借用）by 引用
    - immutable 借用多次
    - mutable
      1) auto-deference 自动解引用
         - SAFETY, prevent deference mutable_borrow
         - ambiguous? => need your choose
      2) exact one 可变借用

** 其他语言对比
*** java.util.ConcurrentModificationException
#+BEGIN_SRC java :imports java.util.*;
  List<Integer> vec = new ArrayList<>();
  for (int i = 0; i < 100; i++) { vec.add(i); }

  for (Integer obj : vec) {
      if (obj < 10) {
          vec.remove(obj);
      }
  }

  System.out.println("OK");
#+END_SRC

#+RESULTS:

*** C++ 段错误
#+BEGIN_SRC C++ :includes '(<iostream> <vector>) :results output
  std::vector<int> v = {1, 2, 3, 4, 5};

  std::vector<int>::iterator it;

  // for(it = v.begin(); it != v.end(); ++it) {
  //         std::cout << *it << " ";
  // }
  // std::cout << std::endl;

  for(it = v.begin(); it != v.end(); ++it) {
          if (*it < 3) continue;
          v.erase(it);
  }

  std::cout << "end" << std::endl;
#+END_SRC

#+RESULTS:
